// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum MessageType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case clipboard // = 0
  case graphics // = 1
  case mediadata // = 2
  case metadata // = 3
  case notification // = 4
  case remote // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .clipboard
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .clipboard
    case 1: self = .graphics
    case 2: self = .mediadata
    case 3: self = .metadata
    case 4: self = .notification
    case 5: self = .remote
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .clipboard: return 0
    case .graphics: return 1
    case .mediadata: return 2
    case .metadata: return 3
    case .notification: return 4
    case .remote: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension MessageType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [MessageType] = [
    .clipboard,
    .graphics,
    .mediadata,
    .metadata,
    .notification,
    .remote,
  ]
}

#endif  // swift(>=4.2)

struct ClipBoard {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var timestamp: String = String()

  var origin: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Graphic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Data = Data()

  var seq: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MetaData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var size: Int32 = 0

  var type: String = String()

  var extraData: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MediaData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playbackRate: Bool = false

  var duration: Double = 0

  var elapsed: Double = 0

  var volume: Float = 0

  var album: String = String()

  var artist: String = String()

  var bundle: String = String()

  var title: String = String()

  var artworkSize: Int32 = 0

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct NotificationData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appName: String = String()

  var body: String = String()

  var profile: String = String()

  var title: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RemoteData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: String = String()

  var extraData: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct BPacket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: MessageType = .clipboard

  var data: BPacket.OneOf_Data? = nil

  var clipboard: ClipBoard {
    get {
      if case .clipboard(let v)? = data {return v}
      return ClipBoard()
    }
    set {data = .clipboard(newValue)}
  }

  var graphic: Graphic {
    get {
      if case .graphic(let v)? = data {return v}
      return Graphic()
    }
    set {data = .graphic(newValue)}
  }

  var mediaData: MediaData {
    get {
      if case .mediaData(let v)? = data {return v}
      return MediaData()
    }
    set {data = .mediaData(newValue)}
  }

  var notificationData: NotificationData {
    get {
      if case .notificationData(let v)? = data {return v}
      return NotificationData()
    }
    set {data = .notificationData(newValue)}
  }

  var remoteData: RemoteData {
    get {
      if case .remoteData(let v)? = data {return v}
      return RemoteData()
    }
    set {data = .remoteData(newValue)}
  }

  var metadata: MetaData {
    get {
      if case .metadata(let v)? = data {return v}
      return MetaData()
    }
    set {data = .metadata(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Data: Equatable {
    case clipboard(ClipBoard)
    case graphic(Graphic)
    case mediaData(MediaData)
    case notificationData(NotificationData)
    case remoteData(RemoteData)
    case metadata(MetaData)

  #if !swift(>=4.1)
    static func ==(lhs: BPacket.OneOf_Data, rhs: BPacket.OneOf_Data) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.clipboard, .clipboard): return {
        guard case .clipboard(let l) = lhs, case .clipboard(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.graphic, .graphic): return {
        guard case .graphic(let l) = lhs, case .graphic(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mediaData, .mediaData): return {
        guard case .mediaData(let l) = lhs, case .mediaData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.notificationData, .notificationData): return {
        guard case .notificationData(let l) = lhs, case .notificationData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.remoteData, .remoteData): return {
        guard case .remoteData(let l) = lhs, case .remoteData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.metadata, .metadata): return {
        guard case .metadata(let l) = lhs, case .metadata(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension MessageType: @unchecked Sendable {}
extension ClipBoard: @unchecked Sendable {}
extension Graphic: @unchecked Sendable {}
extension MetaData: @unchecked Sendable {}
extension MediaData: @unchecked Sendable {}
extension NotificationData: @unchecked Sendable {}
extension RemoteData: @unchecked Sendable {}
extension BPacket: @unchecked Sendable {}
extension BPacket.OneOf_Data: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MessageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CLIPBOARD"),
    1: .same(proto: "GRAPHICS"),
    2: .same(proto: "MEDIADATA"),
    3: .same(proto: "METADATA"),
    4: .same(proto: "NOTIFICATION"),
    5: .same(proto: "REMOTE"),
  ]
}

extension ClipBoard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ClipBoard"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "origin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.timestamp) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.origin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.timestamp.isEmpty {
      try visitor.visitSingularStringField(value: self.timestamp, fieldNumber: 2)
    }
    if !self.origin.isEmpty {
      try visitor.visitSingularStringField(value: self.origin, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ClipBoard, rhs: ClipBoard) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.origin != rhs.origin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Graphic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Graphic"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "seq"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.seq) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    if self.seq != 0 {
      try visitor.visitSingularInt32Field(value: self.seq, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Graphic, rhs: Graphic) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.seq != rhs.seq {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MetaData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MetaData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "size"),
    2: .same(proto: "type"),
    3: .same(proto: "extraData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.size) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.extraData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.size != 0 {
      try visitor.visitSingularInt32Field(value: self.size, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.extraData.isEmpty {
      try visitor.visitSingularBytesField(value: self.extraData, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MetaData, rhs: MetaData) -> Bool {
    if lhs.size != rhs.size {return false}
    if lhs.type != rhs.type {return false}
    if lhs.extraData != rhs.extraData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MediaData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MediaData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playbackRate"),
    2: .same(proto: "duration"),
    3: .same(proto: "elapsed"),
    4: .same(proto: "volume"),
    5: .same(proto: "album"),
    6: .same(proto: "artist"),
    7: .same(proto: "bundle"),
    8: .same(proto: "title"),
    9: .same(proto: "artworkSize"),
    10: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.playbackRate) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.duration) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.elapsed) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.volume) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.album) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.artist) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.bundle) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.artworkSize) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.playbackRate != false {
      try visitor.visitSingularBoolField(value: self.playbackRate, fieldNumber: 1)
    }
    if self.duration != 0 {
      try visitor.visitSingularDoubleField(value: self.duration, fieldNumber: 2)
    }
    if self.elapsed != 0 {
      try visitor.visitSingularDoubleField(value: self.elapsed, fieldNumber: 3)
    }
    if self.volume != 0 {
      try visitor.visitSingularFloatField(value: self.volume, fieldNumber: 4)
    }
    if !self.album.isEmpty {
      try visitor.visitSingularStringField(value: self.album, fieldNumber: 5)
    }
    if !self.artist.isEmpty {
      try visitor.visitSingularStringField(value: self.artist, fieldNumber: 6)
    }
    if !self.bundle.isEmpty {
      try visitor.visitSingularStringField(value: self.bundle, fieldNumber: 7)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 8)
    }
    if self.artworkSize != 0 {
      try visitor.visitSingularInt32Field(value: self.artworkSize, fieldNumber: 9)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MediaData, rhs: MediaData) -> Bool {
    if lhs.playbackRate != rhs.playbackRate {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.elapsed != rhs.elapsed {return false}
    if lhs.volume != rhs.volume {return false}
    if lhs.album != rhs.album {return false}
    if lhs.artist != rhs.artist {return false}
    if lhs.bundle != rhs.bundle {return false}
    if lhs.title != rhs.title {return false}
    if lhs.artworkSize != rhs.artworkSize {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension NotificationData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NotificationData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appName"),
    2: .same(proto: "body"),
    3: .same(proto: "profile"),
    4: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.body) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.profile) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appName.isEmpty {
      try visitor.visitSingularStringField(value: self.appName, fieldNumber: 1)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 2)
    }
    if !self.profile.isEmpty {
      try visitor.visitSingularStringField(value: self.profile, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NotificationData, rhs: NotificationData) -> Bool {
    if lhs.appName != rhs.appName {return false}
    if lhs.body != rhs.body {return false}
    if lhs.profile != rhs.profile {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RemoteData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RemoteData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .same(proto: "extraData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.event) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.extraData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.event.isEmpty {
      try visitor.visitSingularStringField(value: self.event, fieldNumber: 1)
    }
    if !self.extraData.isEmpty {
      try visitor.visitSingularStringField(value: self.extraData, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RemoteData, rhs: RemoteData) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.extraData != rhs.extraData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BPacket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BPacket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "clipboard"),
    3: .same(proto: "graphic"),
    4: .same(proto: "mediaData"),
    5: .same(proto: "notificationData"),
    6: .same(proto: "remoteData"),
    7: .same(proto: "metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try {
        var v: ClipBoard?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .clipboard(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .clipboard(v)
        }
      }()
      case 3: try {
        var v: Graphic?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .graphic(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .graphic(v)
        }
      }()
      case 4: try {
        var v: MediaData?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .mediaData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .mediaData(v)
        }
      }()
      case 5: try {
        var v: NotificationData?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .notificationData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .notificationData(v)
        }
      }()
      case 6: try {
        var v: RemoteData?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .remoteData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .remoteData(v)
        }
      }()
      case 7: try {
        var v: MetaData?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .metadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .metadata(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .clipboard {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    switch self.data {
    case .clipboard?: try {
      guard case .clipboard(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .graphic?: try {
      guard case .graphic(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .mediaData?: try {
      guard case .mediaData(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .notificationData?: try {
      guard case .notificationData(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .remoteData?: try {
      guard case .remoteData(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .metadata?: try {
      guard case .metadata(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: BPacket, rhs: BPacket) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
